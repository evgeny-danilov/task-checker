continue
test_evaluation.outputs.messages.join('.')
test_evaluation.outputs.messages
test_evaluation.outputs
test_evaluation
error_message
    error_message = test_evaluation.outputs.messages
test_evaluation.outputs
continue
test_evaluation.outputs&.examples&.map { _1.exception.message }
test_evaluation.outputs&.examples&.map { _1.exception.message }&.join('. ')
ap test_evaluation.outputs.examples.first.exception.to_h
ap test_evaluation.outputs.examples.first.exception
ap test_evaluation.outputs.examples.first.id
ap test_evaluation.outputs.examples.first.to_h.keys
ap test_evaluation.outputs.examples.first.keys
ap test_evaluation.outputs.examples.first.methods
ap test_evaluation.outputs.examples.first.to_deep_h
ap ({ qwe: "qwe"})
ap { qwe: "qwe"}
ap {qwe: "qwe"}
ap "qwe"
ap test_evaluation.outputs.examples.first.to_h
test_evaluation.outputs.examples.first.to_h
ap test_evaluation.outputs.examples.first.to_h
ap test_evaluation.outputs.examples.first
print test_evaluation.outputs.examples.first.exception.message
test_evaluation.outputs.examples.first.exception.message
test_evaluation.outputs.examples.first.exception
test_evaluation.outputs.examples.first.exeption
test_evaluation.outputs.examples.first
test_evaluation.outputs.examples.first.pending_message
test_evaluation.outputs.examples.first.full_description
test_evaluation.outputs.examples.first.description
test_evaluation.outputs.examples.first.status
test_evaluation.outputs.examples.first.methods
test_evaluation.outputs.examples.first
test_evaluation.outputs.examples.count
test_evaluation
continue
test_evaluation.outputs.messages
test_evaluation
continue
test_evaluation.outputs.messages
test_evaluation
test_evaluation.errors
continue
params
name
continue
File.read(template_path)
File.exists? template_path
@template
template_path
continue
file_content[/(=== template.+)/m]
file_content[/(=== template.+)/]
file_content[/RSpec.+/m]
file_content[/RSpec.+/]
file_content
continue
File.read(task_path).split
File.read(task_path).split("\n")
File.read(task_path).split('\n')
continue
error_stream.string
output_stream.string
continue
error_stream.string
output_stream.string
continue
RSpec::Core::Runner.run(['spec'])
      RSpec.clear_examples
RSpec::Core::Runner.run(['spec'])
result = RSpec::Core::Runner.run(['spec/checkers/base_spec.rb', '--format', 'documentation'], error_stream, output_stream); p output_stream.string; p error_stream.string
result = RSpec::Core::Runner.run(['spec/checkers/base_spec.rb', '--format=documentation'], error_stream, output_stream); p output_stream.string; p error_stream.string
RSpec.configuration.load_spec_files
      RSpec.clear_examples
result = RSpec::Core::Runner.run(['spec/checkers/base_spec.rb', '--format=documentation'], error_stream, output_stream); p output_stream.string; p error_stream.string
RSpec.configuration.load_spec_files
result = RSpec::Core::Runner.run(['spec/checkers/base_spec.rb', '--format=documentation'], error_stream, output_stream); p output_stream.string; p error_stream.string
result = RSpec::Core::Runner.run(['spec/checkers/base_spec.rb', '--format=docuentation'], error_stream, output_stream); p output_stream.string; p error_stream.string
result = RSpec::Core::Runner.run(['spec/checkers/base_spec.rb', '--format=json'], error_stream, output_stream); p output_stream.string; p error_stream.string
      RSpec.clear_examples
result = RSpec::Core::Runner.run(['spec/checkers/base_spec.rb', '--format=json'], error_stream, output_stream); p output_stream.string; p error_stream.string
result = RSpec::Core::Runner.run(['spec/checkers/base_spec.rb', '--format=json'], error_stream, output_stream)
      RSpec.clear_examples
test_path
error_stream.string
output_stream.string
result = RSpec::Core::Runner.run([test_path, '--format=json'], error_stream, output_stream)
x      result = RSpec::Core::Runner.run([test_path, '--format=json'], error_stream, output_stream)
      RSpec.clear_examples
::Checker::Base.call
Checker::Base.call
RSpec::Core::Runner.run(['spec/checkers/base_spec.rb'])
test_path
RSpec::Core::Runner.run([test_path])
File.exists?(test_path)
File.exists?(task_path)
test_pathFil
continue
error_stream.string
output_stream.string
result = RSpec::Core::Runner.run(['spec/checkers/base_spec.rb'], error_stream, output_stream)
RSpec.clear_examples
output_stream.string
result = RSpec::Core::Runner.run([test_path], error_stream, output_stream)
RSpec.clear_examples
Checker::Base.new.call
Checker::Base.call
output_stream.string
result = RSpec::Core::Runner.run(['spec/checkers/base_spec.rb'], error_stream, output_stream)
RSpec.clear_examples
output_stream.string
error_stream.string
result = RSpec::Core::Runner.run([test_path], error_stream, output_stream)
test_path
continue
error_stream.string
output_stream.string
outputs.string
      result = RSpec::Core::Runner.run([test_path], error_stream, output_stream)
      test_path = File.join(CHECKERS_PATH, task_name) + '.rb'
test_path
result
continue
params[:id]
params
continue
Dir.entries(Rails.root.join('spec/checkers/')).select { _1.ends_with?('_spec.rb') }
Dir.entries(Rails.root.join('spec/checkers/'))
Dir.entries(Rails.root.join('spec/checkers/')).last.class
Dir.entries(Rails.root.join('spec/checkers/')).last
Dir.entries(Rails.root.join('spec/checkers/')).first
qwe.class
qwe = Dir[Rails.root.join('spec/checkers/**.rb')].first
Dir[Rails.root.join('spec/checkers/**.rb')].class
Dir[Rails.root.join('spec/checkers/**.rb')]
Dir.entries(Rails.root.join('spec/checkers/**.rb'))
Dir.new(Rails.root.join('spec')).map(&:to_s)
Dir.new(Rails.root.join('spec')).first
Dir.new(Rails.root.join('spec')).count
Dir.new(Rails.root.join('spec'))
Dir.new(Rails.root)
Dir.new('.')
Dir.entries(Rails.root.join('spec/checkers'))
Dir.entries(Rails.root.join('spec'))
Dir.entries('.')
continue
"qwe \n dDd \nsql asd".gsub(Regexp.new('sql|dd', Regexp::IGNORECASE), '###')
"qwe \n ddd \nsql asd".gsub(Regexp.new('sql|dd', Regexp::IGNORECASE), '###')
"qwe \n ddd \nsql asd".gsub(Regexp.new('sql', Regexp::IGNORECASE), '###')
"qwe \nsql asd".gsub(Regexp.new('sql', Regexp::IGNORECASE), '###')
"qwe sql asd".gsub(Regexp.new('sql', Regexp::IGNORECASE), '###')
"qwe sql asd".gsub(Regexp('sql'), Regexp::IGNORECASE)
continue
JSON.parse("") rescue(JSON::ParserError) => []
JSON.parse("") rescue(JSON::ParserError) { [] } 
JSON.parse("") rescue(JSON::ParserError) []
JSON.parse("") rescue JSON::ParserError []
JSON.parse("") rescue []
output_stream.string
output_stream.to_json
error_stream.string
error_stream.to_json
res = RSpec::Core::Runner.run([test_path], error_stream, output_stream)
RSpec.configure { _1.formatter = :json } 
RSpec.configure { _1..formatter = :json } 
RSpec.configure do |config|
res = RSpec::Core::Runner.run([test_path, '--format j'], error_stream, output_stream)
      RSpec::Core::Runner.run([test_path, '--format json'], error_stream, output_stream)
      RSpec.clear_examples
output_stream.string
output_stream.string.class
""
output_stream.string.class
output_stream.string
qwe.class
qwe = JSON.parse output_stream.string
JSON.parse output_stream.string
output_stream.string
output_stream
print output_stream.string
      RSpec::Core::Runner.run([test_path, '--format=json'], error_stream, output_stream)
      RSpec.clear_examples
error_stream.string
print output_stream.string
p output_stream.string
output_stream.string
error_stream.string
error_stream
qwe=      RSpec::Core::Runner.run([test_path], error_stream, output_stream)
      RSpec.clear_examples
output_stream.string
output_stream
error_stream.string
error_stream
qwe=      RSpec::Core::Runner.run([test_path], error_stream, output_stream)
      RSpec.clear_examples
output_stream.string
error_stream.string
error_stream.to_s
error_stream.methods
error_stream
qwe=      RSpec::Core::Runner.run([test_path], error_stream, output_stream)
qwe
qwe.class
qwe=      RSpec::Core::Runner.run([test_path, '--format=json'], error_stream, output_stream)
output_stream.string
error_stream.string
error_stream
      RSpec::Core::Runner.run([test_path, '--format=json'], error_stream, output_stream)
RSpec::Core::Runner.run([test_path])
continue
Runner.new.call
continue
Checker::Base.new.call
Runner.new.call
continue
Checker::Base
Checker.module_eval provided_solution
provided_solution
Checker::Base
exit
Object.class_eval do
Object.eval do
Checker.instance_eval do
Checker.class_eval do
Checker.eval do
Checker
Object.class_eval("module Checker; end;")
Object.class_eval("module Checker; end")
Object.eval("module Checker; end")
Checker.eval do
Checker.class_eval do
Checker.module_eval do
Checker.eval("class Base; end;")
Checker.module_eval("class Base; end;")
Checker.module_eval
Checker::TOP
Checker.class_eval("const_set('TOP', 1)")
Checker::TOP
Checker.class_eval("const_set('TOP', 'Checker')")
Checker.class_eval("const_set('TOP')")
Checker.class_eval("const_set")
Checker.class_eval("TOP = 1;")
eval("1", binding, __FILE__, __LINE__)
eval("class Base; end", binding, __FILE__, __LINE__)
eval("class Base; end", TOPLEVEL_BINDING)
eval("class Base", TOPLEVEL_BINDING)
eval("class Base", Checker.binding)
eval("class Base", Checker)
eval("class Base")
module Checker;
module Checker
